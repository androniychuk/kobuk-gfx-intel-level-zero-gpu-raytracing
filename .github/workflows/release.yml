## Copyright 2022 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

name: release

on:
  schedule:
    - cron:  '00 00 * * *'
  workflow_dispatch:

jobs:

  release-ze_raytracing-ubuntu22_04-GCC:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: embree/ubuntu:22.04
      runs-on: '[ "Linux", "docker", "build" ]'
      artifact-out: release-ze_raytracing-ubuntu22_04-GCC
      artifact-path: ./build
      cmd: |
        mkdir build
        cd build
        cmake -G Ninja -D CMAKE_CXX_COMPILER=g++ -D CMAKE_C_COMPILER=gcc -D CMAKE_BUILD_TYPE=Release ..
        cmake --build . --target package

  ubuntu22_04-agama-build:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: gfx-build/testinstall-ubuntu22.04:18
      runs-on: '[ "Linux", "docker", "build" ]'
      artifact-out: ubuntu22_04-agama-build
      artifact-path: level-zero-raytracing_*.dsc level-zero-raytracing_*.tar.xz level-zero-raytracing_*amd64.deb level-zero-raytracing_*amd64.buildinfo
      pre-cmd: |
        apt update
        eatmydata apt -y install git git-lfs
      cmd: |
        # Build source packages.
        mkdir level-zero-raytracing
        cp -r * level-zero-raytracing || true
        cd level-zero-raytracing
        git clone -b v2021.6.0 https://github.com/oneapi-src/oneTBB.git tbb
        dpkg-buildpackage -j`nproc --all` --no-sign -S -d -rfakeroot
        cd ..
        # Install source package in level-zero-raytracing-build dir.
        # Then we are going to build binaries from it.
        # Keep in mind that packages will be written to this dir.
        eatmydata apt-get build-dep -y ./level-zero-raytracing_*.dsc
        dpkg-source -x ./level-zero-raytracing*.dsc level-zero-raytracing-build
        cd level-zero-raytracing-build
        dpkg-buildpackage -j`nproc --all` -B --no-sign -rfakeroot

  release-ze_raytracing-windows-V142:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      runs-on: '[ "Windows", "NAS", "dg2" ]'
      artifact-path: ./build
      artifact-out: release-ze_raytracing-windows-V142
      shell: cmd
      cmd: |
        mkdir build
        cd build
        cmake -G "Visual Studio 16 2019" -T "V142" -A "x64" -D CMAKE_BUILD_TYPE=Release ..
        cmake --build . --target package

  binary-analysis:
    needs:
      - release-ze_raytracing-ubuntu22_04-GCC
      - release-ze_raytracing-windows-V142
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/binary_analysis.yml@main
    with:
      project: embree
      artifact-in-windows: release-ze_raytracing-windows-V142
      artifact-in-linux:   release-ze_raytracing-ubuntu22_04-GCC
      path: "build/*.zip build/*.gz"

  antivirus-scan:
    needs:
      - release-ze_raytracing-ubuntu22_04-GCC
      - release-ze_raytracing-windows-V142
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/antivirus_scan.yml@main
    with:
      project: embree
      artifact-in-windows: release-ze_raytracing-windows-V142
      artifact-in-linux:   release-ze_raytracing-ubuntu22_04-GCC
      path: "build/*.zip build/*.gz"
